
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                   //指针的进阶
                   //1.字符指针
                   //2.数组指针
                   //3.指针数组
                   //4.数组传参和指针传参
                   //5.函数指针
                   //6.函数指针数组
                   //7.指向函数指针数组的指针
                   //8.回调函数
                   //9.指针和数组面试题的解析

                   //指针的详解（6）
/*
//知识点回顾
int Add(int x,int y)
{
    int z = 0;
    z = x+y;
    return z;
}
int main()
{
    //指针数组
    //int*arr[10];

    //数组指针
    //int* (*pf)[10] = &arr

    //函数指针
//    int (*padd)(int,int) = &Add;//函数名就是函数地址
//    int sum = (*padd)(1,2);
//    printf("%d\n",sum);//3

    //函数指针的数组
    //int (*   parr[6]  )(int,int)

    //指向函数指针数组的指针
    // int (*(*   pparr[6]  ))(int,int) = &parr;
    return 0;
}
*/
/*
回调函数
第一种改造方法运用了回调函数
函数指针也是一种指针，它指向的是函数。在C中，每个函数在编译后都是存储在内存中，并且每个函数都要一个入口地址，
根据这个地址，我们就可以访问并使用这个函数。函数指针就是通过指向这个函数的入口，从而调用这个函数。
对于回调函数一种比较简单的理解也就是将一个函数指针以参数的形式传递给另一个函数。
*/
/*
void bobble_sort(int arr[],int sz)
  {     
    //确定冒泡排序的趟数

      int i = 0;
      //趟数
      for(i=0;i<sz-1;i++)

      {

          //每一趟冒泡排序

          int j = 0;

          for(j = 0;j<sz-1-i;j++)

          {

              if(arr[j]>arr[j+1])

              {

                  int tmp = arr[j];

                  arr[j] = arr[j+1];

                  arr[j+1] = tmp;

              }

          }

      }

  }
struct Stu
{
    char name[20];
    int age;
};
int main()
{
    //冒泡排序函数
    //冒泡排序函数只能排序整型数组
    int arr[10] = {3,2,1,4,5,6,9,8,7,0};
    int sz = sizeof(arr) / sizeof(arr[0]);

    struct Stu s[3] = {{"张三",20},{"里斯",15},{"王五",33}},
    float f = {9.0,8.0,7.0,6.0,5.0,4.0,3.0,2.0,1.0};
    bobble_sort(arr,sz);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%d ",arr[i]);
    }
    return 0;
}
*/

//qsort-库函数-排序
//quick sort-
void qsort(void* base,
           size_t num,
           size_t width,
           int(*compare)(const void*e1,const void*e2)
           );
//           1 .起始位置（目标函数）
//　　　　　 2 .数组大小
//　　　　   3 .元素大小（一个元素的字节）
//　　       4 .比较函数


int cam_int(const void*e1,const void*e2)
{
    //比较两个整型值的
    return *(int*)e1 - *(int*)e2;
}
void test1()
{
    int arr[10] = {3,2,1,4,5,6,9,8,7,0};
    int sz = sizeof(arr) / sizeof(arr[0]);

    qsort(arr,sz,sizeof(arr[0]),cam_int);

    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("%d ",arr[i]);
    }
}
void test2()
{
    float f[] = {9.0,8.0,7.0,6.0,5.0,4.0,3.0,2.0,1.0};
    int sz = sizeof(f) / sizeof(f[0]);
    int j = 0;
    for(j=0;j<sz;j++)
    {
        printf("%f ",f[j]);
    }
}
int cam_float(const void*e1,const void*e2)
{
    if(*(float*)e1 - *(float*)e2)
    {
        return 0;
    }
    else if(*(float*)e1 > *(float*)e2)
    {
        return 1;
    }
    else((*(float*)e1 == *(float*)e2))
    {
        return -1;
    }
}
int cam_stu_by_age(const void*e1,const void*e2)
{
    return ((struct Stu*))e1->age - ((struct Stu*))e2->age;
}
int cam_stu_by_name(const void*e1,const void*e2)
{
    //比较名字就是比较字符串 不能直接用< >比较 应该用strcmp函数

    return strcmp((struct Stu*))e1->name - ((struct Stu*))e2->name);
}
int main()
{
    //int arr[10] = {3,2,1,4,5,6,9,8,7,0};
    //int sz = sizeof(arr) / sizeof(arr[0]);
    //qsort(f,sz,sizeof(f[0]),cam_float);

    struct Stu s[3] = {{"张三",20},{"里斯",15},{"王五",33}},
    int sz = sizeof(s) / sizeof(s[0]);
    qsort(s,sz,sizeof(s[0]),cam_int);

    //float f[9] = {9.0,8.0,7.0,6.0,5.0,4.0,3.0,2.0,1.0};
    //test1();
    //qsort(arr,sz,sizeof(arr[0]),cam_int);

   // test2();
    test3();

//    int i = 0;
//    for(i=0;i<sz;i++)
//    {
//        printf("%d ",arr[i]);
//    }
    return 0;
}
/*
int main()
{
    int a = 10;
    int*pa = &a;
    //char pc = &a;

    //char ch = 't';
    void*p = &a;
    //*p = 0;
    //void*类型的指针 不能进行解应用操作

    p++;
    //void*类型的指针 不能进行加减整数的操作

    p = &ch;
    //void*的指针 可以接受任意类型元素的指针

    return 0;
}
*/





