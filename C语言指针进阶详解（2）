
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                   //指针的进阶
                   //1.字符指针
                   //2.数组指针
                   //3.指针数组
                   //4.数组传参和指针传参
                   //5.函数指针
                   //6.函数指针数组
                   //7.指向函数指针数组的指针
                   //8.回调函数
                   //9.指针和数组面试题的解析


                 //指针的详解（2）
//数组指针---指针
//int main()
//{
//    /*
//    int*p = NULL;//整型指针 - 可以存放整型的地址
//    char*pc = NULL;//字符指针-可以存放字符的地址
//    //数组指针---指向数组的指针-可以存放数组的地址
//    */
//    //int arr[10]={0};
//    //arr-首元素的地址
//    //&arr[0]-首元素的地址
//    //&arr -数组的地址
//    int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//    int(*p)[10] = &arr;//数组的地址要存起来
//    //上面的p就是指针数组
//    return 0;
//}
/*
int main()
{
   char* arr[5];
   char (*pa)[5] = &arr;
   int arr2[10] = {0}
   int (*pa2)[10] = &arr2;
    return 0;
}
*/
//数组指针的使用
//int main()
//{
//    int arr[10] = {1,3,2,4,5,6,7,8,9,10};
//    int(*pa)[10] = &arr;
//    int i = 0;
//    int *p = arr;
//    for(i=0;i<10;i++)
//    {
//        printf("%d ",*(p+i));
//    }
//    /*
//    for(i=0;i<10;i++)
//    {
//        printf("%d ",(*pa)[i]);
//    }
//    */
//    //printf("\n");
//    /*
//     for(i=0;i<10;i++)
//    {
//        printf("%d ",*(*pa+i));
//    }
//    */
//    return 0;
//}
/*
//数组指针在二维数组中使用比较方便
void print1(int arr[3][5],int x,int y)//---参数是数组的形式
 {
     int i = 0;
     int j = 0;
     for(i=0;i<x;i++)
     {
         for(j=0;j<y;j++)
         {
             printf("%d ",arr[i][j]);
         }
         printf("\n");
     }
 }
void print2(int (*p)[5],int x,int y)//使用数组指针---参数是指针的形式
 {
     int i = 0;
     for(i=0;i<x;i++)
     {
         int j = 0;
         for(j=0;j<y;j++)
         {
              printf("%d ",p[i][j]);
              //printf("%d ",*(*(p+i)+j));
              //printf("%d ",*(p[i]+j));
              //printf("%d ",*(arr[i]+j));
              //printf("%d ",(*(p+i))[j]);
         }
         printf("\n");
     }
 }
int main()
{
    int arr[3][5] = {{1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7}};
    print1(arr,3,5);//---二维数组传参表示
    //arr - 数组名 - 首元素地址-二维数组中指向的是第一行数组的地址
    print2(arr,3,5);
    return 0;
}
//------------------------[]的优先级比*的高
*/
/*
int main()
{
    int arr[10] = {1,3,2,4,5,6,7,8,9,10};
    int i = 0;
    int*p = arr;
    for(i=0;i<10;i++)
     {
         printf("%d ",p[i]);
         printf("%d ",arr[i]);
         printf("%d ",*(p+i));
         printf("%d ",*(arr+i));
         //p[i]=arr[i]=*(p+i)=*(arr+i)
     }
    return 0;
}
*/





















