#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
           //操作符详解

//算术操作符
//int main()
//{
//    int a = 5/2;
//    printf("%d",a);
//    return 0;
//}
//移位操作符
//int main()
//{
//    int a = 16;
//    //16的二进制表示：00000000000000000000000000010000
//    //>> -- 右移操作符
//    //1.算术右移 ：右边丢弃 左边补原符号位---正数补0，负数补1
//    //2.逻辑右移 ：右边丢弃 左边补0
//    //移动的是二进制位
//    int b = a >> 1;
//    printf("%d",b); //8  --算术移位
//    return 0;
//}
//int main()
//{
//   int a = -1;
//   int b = a >> 1;
//   printf("%d",b);//-1 --算术移位
//    return 0;
//}
//综上所述：编译器默认算术右移
//int main()
//{
//    int a = -1;
//    //整数的二级制表示有：原码 反码 补码
//    //      <***>存储到内存中是补码
//    //10000000000000000000000000000001 -- 原码
//    //11111111111111111111111111111110 -- 反码---符号位不变，其他位按位取反
//    //11111111111111111111111111111111 -- 补码---反码加1
//    int b = a >> 1;
//    printf("%d",b);
//    return 0;
//}
//int main()
//{
//    int a = 5;
//    int b = a << 1;
//      //00000000000000000000000000000101 ===  5
//      //00000000000000000000000000001010 === 10
//      //对于左移操作符，左边丢弃，右边补0
//      printf("%d",b); //10
//    return 0;
//}
  //位操作符
//int main()
//{
    //& | ^
    //&---按2进制位与
//    int a = 3;
//    int b = 5;
//    int c = a&b;
//    //00000000000000000000000000000011
//    //00000000000000000000000000000101
//    //00000000000000000000000000000001
//    printf("%d",c);//1
     //|---按2进制位或
//     int a = 3;
//     int b = 5;
//    //00000000000000000000000000000011
//    //00000000000000000000000000000101
//    //00000000000000000000000000000111
//     int c = a|b;
//     printf("%d",c);//7
      //^---按2进制位异或----相同为0 相异为1
//      int a = 3;
//      int b = 5;
//      //00000000000000000000000000000011
//      //00000000000000000000000000000101
//      //00000000000000000000000000000110
//      int c = a^b;
//      printf("%d",c);//6
//    return 0;
//}
   //交换两个数 不创建使用第三个临时变量
//int main()
//{
//   int a = 3;
//   int b = 5;
   //加减法：---可能会溢出
//   a = a+b;
//   b = a-b;
//   a = a-b;
//   printf("%d\n%d",a,b);
   //异或方法
//   a = a^b;
//   b = a^b;
//   a = a^b;
//   printf("%d\n%d",a,b);
//    return 0;
//}
//int main()
//{
    //编写代码，求一个整数存储在内存中的二进制中的1的个数
//    int num = 0;
//    scanf("%d",&num);
   /*
    //32bit
    //num&1 == 1
    //00000000000000000000000000000011
    //00000000000000000000000000000001
    //&后
    //00000000000000000000000000000001
    int i = 0;
    int count = 0;
    for(i=0;i<32;i++)
    {
        if(1 == ((num >> i)&1))
            count++;
    }
        printf("%d",count);
        */
    //统计num的补码中有几个1
    //int count = 0;
    /*while(num)
    {
        if(num%2 == 1)
            count++;
        num = num/2;
    }  ---------这种算法存在问题*/
//    printf("%d",count);
//    return 0;
//}
   //赋值操作符
   /*
int main()
{
    //复合赋值符
    int a = 10;
    a = a+2;
    a += 2;

    a = a >> 1;
    a >>= a;

    a = a&1;
    a &= a;
    return 0;
}
   */

//int main()
//{
   //单目操作符---只有一个操作符
//   int a = 10;
//   printf("%d",!a);
//   if(!a)
//   {
//       printf("hehe");
//   }
//   if(a)
//   {
//       printf("hahahaha");
//   }
//     int b = -55;
//     a = -a;
//    return 0;
//}
//int main()
//{
//   int a = 10;
//   int* p = &a;//取地址操作符
//   *p = 20;//解引用操作符
//   printf("%d",a);//20
//    return 0;
//}
/*
int main()
{
    int a = 10;
    char c = 't';
    char* p = &c;
    int arr[10] = {0};
    //sizeof计算变量所占内存的大小，单位是字节
    printf("%d\n",sizeof(a));//4
    printf("%d\n",sizeof(int));//4

    printf("%d\n",sizeof(c));//1
    printf("%d\n",sizeof(char));//1

    printf("%d\n",sizeof(p));//4
    printf("%d\n",sizeof(char*));//4

    printf("%d\n",sizeof(arr));//40  --- 4*10
    printf("%d\n",sizeof(int [10]));//40

    return 0;
}
   */







