#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>   //用于300行的system函数 清空屏幕
#include<string.h>
#include<windows.h>   //用于298行的Sleep函数
//while循环学习
//int main()
//{
//    int i = 0;//初始化
//    while(i<1)//判断
//    {
//       //......
//       i++; //调整
//    }
//
//    return 0;
//}
//int main()
//{
    /*
    int ch = 0;
    while ((ch=getchar())!=EOF)
    {
        putchar(ch);
    }
    */
    /*
    int tht = 0;
    int ch = 0;
    char password[20] = {0};
    printf("输入密码");
    scanf("%s",password);
    //缓冲区剩下一个"\n"
    //读取一下'\n'
    while((ch=getchar())!='\n')
    {
       ;
    }
    printf("请确认(Y/N):>");
    tht = getchar();//Y/N
    if (tht=='Y')
    {
        printf("确认成功");
    }
    else
    {
        printf("放弃确认");
    }
    */
//    return 0;
//}
/*
int main()
{
    int ch = 0;
    while((ch=getchar())!=EOF)
    {
        if(ch<'0' || ch>'9')
            continue;
            putchar(ch);
    }
    return 0;
}
*/
//for循环学习
//int main()
//{
//    int i = 0;
//    for(i=1;i<=10;i++)
//    {
//        if(i==5)
//           // break;//1234
//           continue;//1234678910  但如果在while循环里 会输出1234 陷入死循环
//        printf("%d",i);
//
//    }
//    return 0;
//}
/*
int main()
{
  int arr[10] = {1,2,3,4,5,6,7,8,9,10};
  int i = 0;
  for(i=0;i<=10;i++)
  {
      printf("%d",arr[i]);
  }

    return 0;
}
*/
     //for循环的一些变种
//int main()
//{
////    for(;;)
////    {
////        printf("hehe\n");  //判断条件北圣洛
//    }
//
//    return 0;
//}
//int main()
//{
//    int i = 0;
//    int j = 0;
//    for(i=0;i<10;i++)
//    {
//        for(j=0;j<10;j++)
//        {
//            printf("hehe\n");
//        }
//    }
//    //100个hehe
//    return 0;
//}
//变种2
//int main()
//{
//    int x,y;
//    for(x=0,y=0;x<2 && y<5;++x,y++)
//    {
//        printf("hehe\n");//2个hehe
//    }
//    return 0;
//}
//int main()
//{
//    int i =0;
//    int k =0;
//    for(i=0,k=0;k=0;i++,k++){
//        k++
//    }
//    //循环0次
//    return 0;
//}


     //do...while循环
//int main()
//{
//    int i = 0;
//    do{
//         printf("%d",i);   //表达式
//         i++;
//    }
//    while(i<=10);   //条件
//    return 0;
//}

//int main()
//{
//    int i = 0;
//    do{
//            if(i==5)
//           // break;  //01234
//           continue;  //01234死循环
//         printf("%d",i);
//         i++;
//    }
//    while(i<=10);
//    return 0;
//}
    //练习题
    /*
    //1.计算n的阶乘
int main()
{
   int i = 0;
   int n = 0;
   int ret = 1;
   scanf("%d",&n);
   for(i=1;i<=n;i++)
   {
       ret = ret*i;
   }
   printf("ret=%d\n",ret);
    return 0;
}
      */

      /*
      //2.计算1！....10!的和
//int main()
//{
//   int i = 0;
//   int n = 0;
//   int ret = 1;
//   int sum = 0;
//   for(n=1;n<=10;n++)
//   {
//       ret = 1;
//     for(i=1;i<=n;i++)
//   {
//       ret = ret*i;
//     }
//     sum = sum + ret;
//   }
//
//   printf("sum=%d\n",sum);
//    return 0;
//}

//简便方法 一层循环就可以
int main()
{
   int i = 0;
   int n = 0;
   int ret = 1;
   int sum = 0;
   for(n=1;n<=10;n++)
   {
       ret = ret*n;
     sum = sum + ret;
   }

   printf("sum=%d\n",sum);
    return 0;
}
         */
  //3.写一个数字 在数组中查找到，下面以7为例子
//int main()
//{
//    int arr[] = {1,2,3,4,5,6,7,8,9,10};
//    int k = 7;
//       int i =0;
//       int sz = sizeof(arr)/sizeof(arr[0]);
//       for(i=0;i<sz;i++)
//       {
//           if(k==arr[i])
//           {
//               printf("找到了");
//               break;
//           }
//       }
//        if(i == sz)
//            printf("没找到");
//
//    return 0;
//}
     /*
  //折半查找算法/二分查找算法
  int main()
  {
      int arr[] = {1,2,3,4,5,6,7,8,9,10};
      int k = 6;
      int sz = sizeof(arr)/sizeof(arr[0]);//计算元素个数
      int left = 0;//左下标
      int right = sz-1;//右下标
      while(left<=right)
        {
      int mid = (left+right)/2;//中间的下标
      if(arr[mid]>k)
      {
          right = mid-1;
      }
      else if (arr[mid]<k)
      {
          left = mid + 1;
      }
      else
      {
          printf("找到了，下标是：%d\n",mid);
          break;
      }
    }
    if(left>right)
    {
        printf("找不到");
    }
      return 0;
  }
   */
    /*
   //4.写代码 演示多个字符从两端移动 向中间汇聚
   int main()
   {
     //welcome to my home!!!!!!!!
     //#####################
     //w###################!
     //we#################!!
     //wel###############!!!
     //welc#############!!!!
     //...
     //welcome to my home!!!!!!
     char arr1[] = "welcome to my home!!!!!!";
     char arr2[] = "########################";
     int left = 0;//左下标
//     int sz = sizeof(arr1)/sizeof[0];//数组长度
//     int right = sz-2;//右下标
       //标记：为社么-2是因为数组中最后一个元素是\0，不是！右下标是：数组长度-2

     int right = strlen(arr1)-1;//右下标的另一种简单求法
     while(left<=right)
    {
          arr2[left] = arr1[left];
          arr2[right] = arr1[right];
          printf("%s\n",arr2);
          //休息一秒
          Sleep(1000);//单位是毫秒
          system("cls");//执行系统命令的一个函数-cls-清空屏幕   形成另一种显示的效果
          left++;
          right--;
     }
       return 0;
   }
      */
      /*
    //5.编写代码实现 模拟用户登录情景 并且只能登录三次 ；
    //（只允许输入三次密码 密码正确则提示登录成功 否则退出程序）
int main()
{
    int i = 0;
    char password[20] = {0};
    for(i=0;i<3;i++)
    {
        printf("请输入密码：>");
        scanf("%s",password);
        //if(password == "123456")//==不能比较两个字符串是否相等，应该使用一个库函数-strcmp
        if(strcmp(password , "123456") == 0)
        {
            printf("登陆成功");
            break;
        }
        else
        {
            printf("密码错误\n");
        }
    }
        if(i==3)
            printf("三次密码都错误 请退出程序\n");

    return 0;
}
    */
