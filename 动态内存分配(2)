#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include<windows.h>
#include<math.h>
#include<time.h>
#include<assert.h>
                     //动态内存分配(2)
//经典笔试题1
/*
void GetMemory(char *p)
{
    p = (char*)malloc(100);
}

void Test(void)
{
    char *str = NULL;
    GetMemory(str);
    strcpy(str,"hello world");
    printf(str);
}
int main()
{
    Test();

    //上述代码存在的问题
    //1.运行代码会奔溃
    //2.程序存在内存泄露的问题
    //str以值传递的形式给p p是GetMeory函数的形参 只能在函数内部有效
    //GetMeory函数返回后 动态开辟内存尚未释放 并且无法找到 所以会造成内存泄露

    return 0;
}
*/
/*
//改正上述代码方法1
void GetMemory(char **p)
{
    *p = (char*)malloc(100);
}

void Test(void)
{
    char *str = NULL;
    GetMemory(&str);
    strcpy(str,"hello world");
    printf(str);

    free(str);
    str = NULL;
}
int main()
{
    Test();

    return 0;
}
*/
/*
//改正上述代码方法2
char* GetMemory(char *p)
{
    p = (char*)malloc(100);
    return p;
}

void Test(void)
{
    char *str = NULL;
    str = GetMemory(str);
    strcpy(str,"hello world");
    printf(str);

    free(str);
    str = NULL;
}
int main()
{
    Test();

    return 0;
}
*/
/*
//经典笔试题2
char* GetMemory(void)
{
    char p[] = "hello world";
    return 0;
}
void Test(void)
{
    char *str = NULL;
    str = GetMemory(Test(););
    printf(str);  //打印随机值
}
int main()
{
    Test();
    //返回栈空间地址的问题---非法访问内存

    return 0;
}
int* test()
{
    //static int a = 10;//静态区---正确
    int a = 10;//栈区---返回栈空间地址的问题---非法访问内存
    return &a;
}
int main()
{
    int*p = test();
    *p = 20;
    return 0;

}
int*test()
{
    int *ptr = malloc(100);//堆区
    return ptr;
}
//写法正确
int main()
{
   int *p = test() ;
   return 0;
}
        //推荐书籍---《高质量C++/C编程指南》
*/
/*
//经典笔试题3
void GetMemory(char**p,int num)
{
    *p = (char*)malloc(num);
}
void Test(void)
{
    char*str = NULL;
    GetMemory(&str,100);
    strcpy(str,"hello");//hello
    printf(str);
    //忘记释放动态开辟的内存 导致内存泄露问题

//    free(str);
//    str = NULL;
}
//存在内存泄露问题
int main()
{
    Test();

    return 0;
}
*/
/*
//经典笔试题4
 void Test(void)
 {
     char *str = (char*)malloc(100);
     strcpy(str,"hello");
     free(str);//free释放str指向的空间后 并不会吧str置为NULL
     //str = NULL;//改正错误
     if(str != NULL)
     {
         //非法访问内存 释放后的空间再次被使用
         strcpy(str,"world");
         printf(str);
     }
 }
int main()
{
    Test();

    return 0;
}
*/
//C99提出的柔性数组
/*
何为柔型数组
也许你从来没有听说过柔性数组（Flexible Array）这个概念，但是它确实是存在的。
C99 中，结构中的最后一个元素允许是未知大小的数组，这就叫做『柔性数组』成员。
柔性数组(Flexible Array)是引入的一个新特性，它允许你在定义结构体时创建一个空数组，而这个数组的大小可以在程序运行的过程中根据你的需求进行更改，特别注意的一点是：这个空数组必须声明为结构体的最后一个成员，并且还要求这样的结构体至少包含一个其他类型的成员。
比如：

typedef struct st_type
{
 int i;
 int a[0];//柔性数组成员
}type_a;

上述代码中，数组a就是一个柔型数组，它符合了为空数组，且为结构中的最后一个元素，需要提醒的是，空数组的写法不止有 a[0] 这种写法，下面这种a[] 的写法也是可以的，具体用哪种可以看自己使用的编译器支持哪种。

typedef struct st_type
{
 int i;
 int a[];
}type_a;

柔型数组的特点与使用
我们先来看看这段代码：

struct S
{
    int x;
    int a[];
}S1;
int main()
{
    printf("%d", sizeof(S1));
}

这段代码的输出是什么？我们打印结构体S所占空间的大小，可是柔型数组，也就是这个a[]占多少字节呢？

最终的输出结果是4个字节，换句话说就是，这份柔型数组a[]似乎并没有计算到结构体的大小中，那么是不是柔型数组是不占用内存的呢？这时候我们就需要谈及柔型数组的特点了。

1、结构中的柔性数组成员前面必须至少一个其他成员。
2、sizeof 返回的这种结构大小不包括柔性数组的内存。
3、包含柔性数组成员的结构用malloc ()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。

而柔型数组相当于在一个结构体的最后 ，申明一个长度为空的数组，就可以使得这个结构体是可变长的。对于编译器来说，此时长度为0的数组并不占用空间，因为数组名本身不占空间，它只是一个偏移量， 数组名这个符号本身代表了一个不可修改的地址常量，但它的大小是可以随意变化的。
一言以蔽之，就是包含柔数组成员的结构，是需要用malloc函数进行内存的动态分配,且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。即“结构体大小+分配给柔型数组空间内存的大小”。
而柔型数组的使用可以如下述代码：

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>

struct S
{
    int x;
    int a[];
};
int main()
{
    //为柔性数组a[]开辟了40个字节的空间
    struct S *ps =(struct S*)malloc(sizeof(struct S) + 40);
    if (ps == NULL)                                    //检查是否为空指针
    {
        perror("ps");
        return 1;
    }
    ps->x = 10;
    int i = 0;
    for (i = 0; i < 10; i++)
    {
        ps->a[i] = i;                                   //数组使用
    }
    for (i = 0; i < 10; i++)
    {
        printf("%d  ",ps->a[i]);                        //数组打印
    }
    //若觉得40不够用，可用realloc扩容
    //如:
    struct S* ptr = (struct S*)realloc(ps, sizeof(struct S) + 80);
    if (ptr == NULL)                                    //检查是否为空指针
    {
        perror("realloc");
        return 1;
    }
    else
    {
        ps = ptr;
    }
    free(ps);                                            //释放内存并置为空指针
    ps = NULL;
}

柔型数组的优势
那么不禁有人要问了：“我们一定要使用柔型数组吗？我们可以直接用字符串指针malloc申请一块空间。”而使用字符串指针固然可行，但看下面实现的代码。

struct S
{
	int n;
	char* arr;
};

int main()
{
	struct S* ps = (struct S*)malloc(sizeof(struct S));
	if (ps == NULL)
	{
		perror("malloc");
		return 1;
	}
	ps->n = 100;
	ps->arr = (char*)malloc(sizeof(char)*10);
	if (ps->arr == NULL)
	{
		perror("malloc->arr");
		return 1;
	}
	//使用
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		ps->arr[i] = 'Q';
	}
	//增加
	char* ptr = (char*)realloc(ps->arr, 20*sizeof(char));
	if (ptr != NULL)
	{
		ps->arr = ptr;
	}
	else
	{
		perror("realloc->ptr");
		return 1;
	}
	//使用

	//释放
	free(ps->arr);
	ps->arr = NULL;
	free(ps);
	ps = NULL;

上述代码确实可以完成柔型数组相同的功能，但其中有些优劣。

1、方便内存释放
使用柔性数组我们只用使用一次free函数，而使用字符串指针要使用free函数两次，有内存泄漏的风险；同理，对于malloc等内存函数的使用也是同理的。
不仅如此，用户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体指针，用户做一次free就可以把所有的内存也给释放掉。
2、有利于访问速度
连续的内存有益于提高访问速度，也有益于减少内存碎片。

内存碎片是什么？

内存碎片是因为不连续的内存块之间存在的、无法达到足够长度的即无法被利用的较为狭小的空间，这会导致这一大整块的利用效率变低（如使用字符串指针用malloc等申请空间便会出现这种情况）。而使用柔型数组则可以申请一块连续的内存空间，能提高其利用率。

*/

struct S
{
    int n;
    int arr[0];//未知大小的数组 -- 柔性数组成员--数组大小可以调整
};
int main()
{
//    struct S s;//
//    printf("%d\n",sizeof(s));//4
      struct S*ps = (struct S*)malloc(sizeof(struct S)+5*sizeof(int));
      ps -> n = 100;

      int i = 0;
      for(i = 0;i < 5;i++)
      {
          ps ->arr[i] = i;//0 1 2 3 4
      }
      struct S* ptr = realloc(ps,44);
      if(ptr != NULL)
      {
          ps = ptr;
      }
      for(i = 5;i<10;i++)
      {
          ps -> arr[i] = i;
      }
      for(i = 0;i<10;i++)
      {
          printf("%d\n",ps->arr[i]);
      }
      //释放
      free(ps);
      ps = NULL;
    return 0;
}

//另一种写法
struct S
{
    int n;
    int*arr;
};
int main()
{
    struct S* ps = (struct S*)malloc(sizeof(struct S));
    ps -> arr = malloc(5*sizeof(int));
    int i = 0;
    for(i = 0;i<5;i++)
    {
        ps->arr[i] = i;
    }
    for(i = 0;i<5;i++)
    {
        printf("%d\n",ps->arr[i]);
    }
    //调整大小
    int *ptr = realloc(ps->arr,10*sizeof(int));
    if(ptr != NULL)
    {
        ps -> arr = ptr;
    }
    for(i=5;i<10;i++)
    {
        ps->arr[i] = i;
    }
    for(i = 5;i<10;i++)
    {
        printf("%d\n",ps->arr[i]);
    }
    //释放内存
    free(ps -> arr);
    ps ->arr = NULL;
    free(ps);
    ps = NULL;

    return 0;
    //malloc使用越频繁 内存碎片越多 浪费内存
}


















