#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                     //数组
//int main()
//{
//    //创建一个数组 存放10个整型
//    int arr[10] = {1,2,3,4,5,6};
//    char arr2[2]={'a','b'};
//    char arr3[]="afasdg"; //7个元素还有个\0
//    printf("%d\n",sizeof(arr3));//7 计算arr4所占空间的大小 == 7
//    printf("%d",strlen(arr3));//6  求字符串的长度 == 6
//    //strlen 和 sizeof 没有什么关联
//    //strlen求字符串的长度 - 库函数- 得使用头文件 \0之前的字符个数
//    //sizeof 计算变量 数组 类型的大小 - 单位是字节 - 操作符
//    int n = 5;
//
//    return 0;
//}
//int main()
//{
//   char arr1[] = "abc";
//   char arr2[] = {'a','b','c'};
//   printf("%d\n",sizeof(arr1));//4
//   printf("%d\n",sizeof(arr2));//3
//   printf("%d\n",strlen(arr1));//3
//   printf("%d\n",strlen(arr2));//---随机数 不知道\0什么时候出现
//
//    return 0;
//}

//int main()
//{
//    char arr[] = "abcdef";//[a][b][c][d][e][f][\0]
//    printf("%c\n",arr[3]);
//    int i = 0;
//    //for(i=0;i<6;i++)
//        for(i=0;i<(int)strlen(arr);i++)
//    {
//        printf("%c",arr[i]);
//    }
//
//    return 0;
//}
//int main()
//{
//   int arr[] = {1,2,3,4,5,6,7,8,9,10} ;
//   int sz = sizeof(arr)/sizeof(arr[0]);
//   int i = 0;
//   for(i=0;i<sz;i++)
//    printf("%d",arr[i]);
//    return 0;
//}
/*
//一维数组的内存存储
int main()
{
    int arr[] = {1,2,3,4,5,6,7,8,9,10} ;
    int sz = sizeof(arr)/sizeof(arr[0]);
    int i = 0;
    for(i=0;i<sz;i++)
    {
        printf("&arr[%d]=%p\n",i,&arr[i]);
    }

    return 0;
}
*/
 //二维数组的创建以及初始化
// int main()
// {
//    int arr[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};               //3hang行4lie列
//    char arr[3][5];
//     return 0;
// }
/*
 //二维数组的使用
 int main()
 {
     int arr[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
     int i =0;
     for(i=0;i<3;i++)
     {
         int j=0;
         for(j=0;j<4;j++)
         {
             printf("%d",arr[i][j]);
         }
         printf("\n");
     }
     return 0;
 }
 */
//二维数组在内存中的存储
//int main()
//{
//     int arr[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
//     int i =0;
//     for(i=0;i<3;i++)
//     {
//         int j=0;
//         for(j=0;j<4;j++)
//         {
//             printf("arr[%d][%d]=%p,",i,j,&arr[i][j]);
//         }
//         printf("\n");
//     }
//
//    return 0;
//}

   //数组作为函数参数
   /*
          //---------冒泡排序
   void bubble_sort(int arr[],int sz)
   {
       //确定冒泡排序的趟数
       int i = 0;
       for(i=0;i<sz-1;i++)
       {
           //每一趟冒泡排序
           int j = 0;
           for(j = 0;j<sz-1-i;j++)
           {
               if(arr[j]>arr[j+1])
               {
                   int tmp = arr[j];
                   arr[j] = arr[j+1];
                   arr[j+1] = tmp;
               }
           }
       }
   }
   //对函数进行优化
//   void bubble_sort(int arr[],int sz)
//   {
//       //确定冒泡排序的趟数
//       int i = 0;
//       for(i=0;i<sz-1;i++)
//       {
//           int flag = 1;   //假设这一趟要排序的数据已经有序
//           //每一趟冒泡排序
//           int j = 0;
//           for(j = 0;j<sz-1-i;j++)
//           {
//               if(arr[j]>arr[j+1])
//               {
//                   int tmp = arr[j];
//                   arr[j] = arr[j+1];
//                   arr[j+1] = tmp;
//                   flag = 0;   //本趟排序的数据其实不完全有序
//               }
//           }
//           if(flag == 1)
//            {
//              break;
//            }
//       }
//   }

   int main()
   {
      int arr[] = {9,8,7,6,5,4,3,2,1,0};
      int i =0;
      int sz = sizeof(arr)/sizeof(arr[0]);
      //对arr进行排序 排成升序的结果
      // <***> arr是数组 对数组arr进行传参 实际上传递过去的是数组arr首元素的地址&arr[0]
      bubble_sort(arr,sz);//冒泡排序函数
      for(i=0;i<sz;i++)
      {
          printf("%d",arr[i]);
      }
       return 0;
   }
   */
   /*
  //自己写一遍
  maopao(int arr[],int sz)
  {
      int i = 0;
      for(i=0;i<sz-1;i++)
      {
          int j = 0;
          for(j=0;j<sz-1-i;j++)
          {
              if(arr[j]<arr[j+1])
              {
                  int tmp = arr[j];
                  arr[j] = arr[j+1];
                  arr[j+1] = tmp;
              }
          }
      }
  }
  int main()
  {
      int arr[] = {0,1,2,3,4,5,6,7,8,9};
      int i = 0;
      int sz = sizeof(arr)/sizeof(arr[0]);
      maopao(arr,sz);
      for(i=0;i<sz-1;i++)
      {
          printf("%d",arr[i]);
      }
      return 0;
  }
  */
  /*
  //数组名是什么？
         //-------首元素的地址
int main()
{
    int arr[] = {0,1,2,3,4,5,6,7,8,9};
    printf("%p\n",arr);
    printf("%p\n",&arr[0]);
    printf("%d\n",*arr);//解应用一下结果为0
    //打印结果相同 数组的地址就是首元素的地址
    return 0;
    //补充
    //1.sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名 数组名表示整个数组
    //2.&数组名，取出的是数组的地址。&数组名，数组名表示整个数组
    //除以上两种情况之外，所有数组名都表示数组首元素的地址
}
  */





