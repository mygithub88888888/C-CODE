#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>

                   //初识指针(2)
//如何规避野指针
//1.指针初始化
//2.小心指针越界
//3.指针指向空间释放即使置NULL
//4.指针使用之前检查有效性

//1.指针初始化
//int main()
//{
//    int a = 10;
//    int*pa = &a0;//初始化
//    int*p = NULL;//NULL - 用来初始化指针或者给指针赋值的

//      int a = 10;
//      int *pa = &a;
//      *pa = 20;
//
//      pa = NULL;
//
//      if(pa != NULL)
//      {
//          *p = 20;
//      }
//   return 0;
//}
   //指针运算
   //1.指针+-整数
//int main()
//{
//    int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//    int i = 0;
//    int sz = sizeof(arr)/sizeof(arr[0]);
//    int *p = &arr[9];
//    for(i=0;i<5;i++)
//    {
//        printf("%d \n",*p);
//        //p = p+1; //指针+整数
//        p-=2;//指针-整数
//    }
//    return 0;
//}
    //2.指针-指针
//int main()
//{
//    int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//    printf("%d\n",&arr[9] - &arr[0]);//得到的是中间的元素个数
//
//    return 0;
//}
//int my_strlen(char* str)
//{
//    char*start = str;
//    char*end = str;
//    while(*end != '\0')
//    {
//        end++;
//    }
//    return end - start;
//}
//int main()
//{
//    //strlen - 求字符串长度
//    //递归 - 模拟实现了strlen - 计数器的方式1 ， 递归的方式2
//    //今天用指针方式
//    char arr[] = "bit";
//    int len = my_strlen(arr);
//    printf("%d\n",len);//3
//    return 0;
//}
      //3.指针的关系运算--—？

    //指针和数组
//int main()
//{
//    int arr[10] = {0};
//    printf("%p\n",arr);//数组名是首元素的地址
//    printf("%p\n",arr+1);
//
//    printf("%p\n",&arr[0]);
//    printf("%p\n",&arr[0]+1);
//
//    //1.&数组名-&arr 取出的是整个数组的地址
//    printf("%p\n",&arr);//取出的是整个数组的地址
//    printf("%p\n",&arr+1);
//    //2.sizeof(数组名) - 计算的是整个数组的大小
//
//    return 0;
//}

//int main()
//{
//    int arr[10] = {0};
//    int *p = arr;
//    int i = 0;
//     for(i=0;i<10;i++)
//     {
//         *(p+i) = i;
//     }
//
//     for(i=0;i<10;i++)
//     {
//         printf("%d\n",*(p+i));
//     }
//    /*
//    for(i=0;i<10;i++)
//    {
//        printf("%p  ====  %p\n",p+i,&arr[i]);
//    }
//    */
//    return 0;
//}

     //二级指针
//int main()
//{
//   int a = 10;
//   int*pa = &a;
//   int**ppa = &pa; //ppa就是一个二级指针
//   **ppa = 20;
//   printf("%d\n",**ppa);//20
//   printf("%d\n",a);//20
//   int***pppa = &ppa;//pppa就是一个三级指针
//    return 0;
//}
    /*
     //指针数组 - 数组 - 存放指针的数组
     //数组指针 - 指针
//1.指针数组
int main()
{
    int a = 10;
    int b = 20;
    int c = 30;
//    int *pa = &a;
//    int *pb = &b;
//    int *pc = &c;
    //整型数组-存放整型
    //字符数组-存放字符
    //指针数组-存放指针
    //int arr[10];
    int* arr2[3] = {&a,&b,&c};//指针数组
    int i=0;
    for(i=0;i<3;i++)
    {
         printf("%d\n",*(arr2[i]));
    }
    return 0;
}
*/







