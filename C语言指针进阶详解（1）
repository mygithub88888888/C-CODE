
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                   //指针的进阶
                   //1.字符指针
                   //2.数组指针
                   //3.指针数组
                   //4.数组传参和指针传参
                   //5.函数指针
                   //6.函数指针数组
                   //7.指向函数指针数组的指针
                   //8.回调函数
                   //9.指针和数组面试题的解析


                 //指针的详解（1）
//void test(int arr[])
//{
//    int sz = sizeof(arr)/sizeof(arr[0]);
//    printf("%d\n",sz);
//}
//int main()
//{
//    int arr[10] = {0};
//    test(arr);
//    return 0;
//}
//1.字符指针
//int main()
//{
//    char ch = 'w';
//    char*pc = &ch;
//    return 0;
//}
//int  main()
//{
//    char arr[] = "afdfgs";
//    char*pc=arr;
//    printf("%s\n",arr);
//    printf("%s\n",pc);
//    return 0;
//}
//int main()
//{
//    const char* p = "avsfgh";//"avsfgh"是一个常量字符串---存的是a的地址
//    printf("%c\n",*p);//a
//    printf("%s\n",p);//avsfgh
//    return 0;
//}
/*
//面试题
int main()
{
    char arr1[]="asdfds";
    char arr2[]="asdfds";
    const char*p1="asdfds";
    const char*p2="asdfds";
    if(p1 == p2)//一样
    {
        printf("hehehe\n");
    }else
    {
        printf("hahaha\n");
    }
//    if(arr1 == arr2)//两个数组,数组名就是首元素的地址自然不一样
//    {
//        printf("hehehe\n");
//    }else
//    {
//        printf("hahaha\n");
//    }
    return 0;
}
*/
//2.指针数组
//int main()
//{
//    int arr[10] = {0};
//    char ch[5] = {0};
//    int* parr[4];//存放整型指针的数组-指针数组
//    char* pch[5];//存放字符指针的数组-指针数组
//    return 0;
//}
/*
int main()
{
    int a = 10;
    int b = 20;
    int c = 30;
    int d = 40;
    int*arr[4] = {&a,&b,&c,&d};
    int i = 0;
    for(i=0;i<4;i++)
    {
        printf("%p\n",arr[i]);
        printf("%d\n",*arr[i]);
    }
    return 0;
    //指针数组一般不这样用
}
*/
/*
//指针数组的应用<1>ss
int main()
{
    int arr1[] = {1,2,3,4,5};
    int arr2[] = {2,3,4,5,6};
    int arr3[] = {3,4,6,5,7};
    int*parr[] = {arr1,arr2,arr3};//数组名是首元素的地址
    int i = 0;
    for(i-0;i<3;i++)
    {
        int j = 0;
        for(j=0;j<5;j++)
        {
            printf("%d ",*(parr[i]+j));
        }
        printf("\n");
    }
    return 0;
}
*/






