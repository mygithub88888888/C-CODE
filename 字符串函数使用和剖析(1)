
#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                  //字符串函数使用和剖析(1)
1//字符函数和字符串函数
//strlen 函数
//1.计数器的方法
//2.递归
//3.指针-指针

/*
//方法一：计数器实现
int my_strlen(const char*str)
{
    int count = 0;
    assert(str != NULL);
    while(*str != '\0')
    {
        count++;
        str++;
    }
    return count;
}
int main()
{
     // int len = my_strlen("abcdef");

      //错误写法err
//    char arr[] = {'a','b','c','d','e','f'};
//    int len = strlen(arr);//随机数
    //printf("%d\n",len);//6

    if(strlen("abc") - strlen("abcdef") > 0)
    {
        printf("hehe");
    }
    else
    {
        printf("haha");
    }
    return 0;
}
*/
/*
//方法二：（递归实现）
int my_strlen(char *p)
{
	if(*p == '\0')
	{
		return 0;
	}
	else
	{
		return 1+my_strlen(p+1);
	}
}
int main()
{char *p = "abcde";
    char *p = "abcde";
	printf("%d\n",my_strlen(p));
	return 0;
}
*/
/*
//strcpy函数
//my_strcpy(char* dest, char*src)
//{
//    assert(dest != NULL);
//    assert(src != NULL);
//    while(*src != '\0')
//    {
//        *dest = *src;
//        dest++;
//        src++;
//    }
//    *dest = *src;//'\0'
//}
//代码简化
char* my_strcpy(char* dest,const char*src)
{
    assert(dest != NULL);
    assert(src != NULL);
    char* ret = dest;
    //拷贝src指向的字符串到dest指向的空间，包含'\0';
    while(*dest++ = *src++)
    {
        ;
    }
    //返回目的空间的起始地址
    return ret;
}
int main()
{
   char arr1[] = "abcdefghi";
   char arr2[] = "yan";

   my_strcpy(arr1,arr2);
   printf("%s\n",arr1);

    return 0;
}
*/
/*
//strcat函数---字符串追加函数
char* my_strcat(char* dest,const char*src)
{
    char *ret = dest;
    assert(dest != NULL);
    assert(src);

    //1.找到目的字符串的'\0'
    while(*dest != '\0')
    {
        dest++;
    }
    //2.追加
    while(*dest++ = *src++)
    {
        ;
    }
    return ret;
}
int main()
{
    char arr1[30] = "hello";
    char arr2[] = "world";
    my_strcat(arr1,arr2);
    printf("%s\n",arr1);
    //目的地空间必须足够大
    return 0;
}
*/
















