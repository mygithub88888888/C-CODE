#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
                           //初识C语言（2）
//int main()
//{
     //int a=0;
     //int b=~a;
     //~是按（二进制）位取反
     //1011
     //0100
     //printf("%d\n",b);//-1
//     int a =10;
//     int b =a++;
//     printf("a=%d b=%d\n",a,b);

//     return 0;
//}
//int main()
//{
//    int a = (int)3.14;//强制类型转换
//    return 0;
//}
//int main()
//{
//   //条件操作符
//  // exp1?exp2:exp3
//  int a = 10;
//  int b = 20;
//  int max = 0;
//
//  max = (a>b?a:b);
//  if(a>b)
//    max = a;
//  else
//    max = b;
//    return 0;
//}
//int main()
//{
//    register int a = 10//建议吧
//    return 0;
//}

//关键字
// struct ===结构体关键字
// signed ===定义符号的
//unio===联合体
/*
void test()
{
    //关键字static
    //static修饰局部变量，局部变量的生命周期变长
    static int a = 1;//是一个静态的局部变量
    a++;
    printf("a = %d\n",a);
}
int main()
{

   int i=0;
   while(i<5)
   {
       test();
       i++;
   }
    return 0;
}
*/
/*
//static修饰全局变量,改变了变量的作用域，让只能在源文件中使用
int main()
{
    //extern === 声明外部符号的
    extern int g_val;
    printf("g_val = %d\n",g_val);
    return 0;
}
*/
/*
//static修饰函数===改变函数的连接属性
//声明外部函数
extern int Add(int ,int);

int main()
{
    int a = 10;
    int b = 20;
    int sum = Add(a,b);
    printf("sum = %d\n",sum);
    return 0;
}
*/
/*
//关键字define
//#define 定义标识符常量
//#define MAX 100
//#define 可以定义宏-带参数
     //定义函数
Max(int x,int y)
{
    if(x>y)
        return x;
    else
        return y;
}
     //宏的定义方式
#define MAX(X,Y) (X>Y?X:Y)
int main()
{
   //int a = MAX;
   int a = 10;
   int b = 20;
     //函数
   int max = Max(a,b);
   printf("max = %d\n",max);
   //宏的方式
   max = MAX(a,b);
   printf("max = %d\n",max);
    return 0;
}
*/


   /*
        //指针

int main()
{
    int a = 10;//4个字节
    int* p=&a;//取地址
    printf("%p\n",p);
    printf("%p\n",&a);

    *p = 20;//*-解应用操作符
     printf("%d\n",a); //把a的值改为20

        //有一种变量是存放地址的===指针变量

//    &a;//取出a的地址
//    printf("%p\n",&a);
    return 0;
}
     */
      /*
  //指针举例子
int main()
{
    char ch = 'r';
      printf("%c\n",ch);
    char* pc = &ch;
    *pc = 'a';
    printf("%c\n",ch);
     printf("%d\n",sizeof(pc));
    return 0;
}
      */

