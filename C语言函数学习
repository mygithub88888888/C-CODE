#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                       //函数
/*
Add(int x,int y)
{
    int z = 0;
    z = x+y;
    return z;
}
int main()scanf("%d%d",&a,&b);
{
   int a = 0;
   int b = 0;
   scanf("%d%d",&a,&b);
   int sum = Add(a,b);
   printf("%d\n",sum);
    return 0;
}
   */
//IO函数
//字符串操作函数
//字符操作函数、
//内存操作函数
//数学函数
//时间日期函数
//其他函数
/*
int main()
{
    //strlen - 字符串求长度
    //strcpy - 字符串拷贝
    char arr1[] = "bit";//"/0表示字符串结束标志"
    char arr2[] = "########";
    strcpy(arr2,arr1);   // arr1复制到arr2
    printf("%s",arr2);
    return 0;
}
*/
/*
//memset - memory-set -内存设置
int main ()
{
  char arr[] = "hello world";
  memset(arr,'#',5);
  printf("%s",arr); //##### world
    return 0;
}
*/
/*
//自定义函数
int get_max(int x,int y)
{
    if(x>y)
        return x;
    else
        return y;
}
int main()
{
    int a =10;
    int b =50;
    int max = get_max(a,b);
    printf("max = %d\n",max);
    max = get_max(100,300);
    printf("max = %d\n",max);
    return 0;
}
*/
/*
//写一个函数交换两个整型变量的内容
//利用指针的方法才能解决交换函数
void Swap1(int x,int y)
//不能完成任务
//当实参传给形参的时候
//形参其实是实参的一份临时拷贝
//对形参的修改不会实参的
{
   int tmp = 0;
   y = x;
   tmp = y;
   x = tmp;
}
void Swap2(int*pa,int*pb)  //int*pa,int*pb是形参
{
    int tmp = 0;
    tmp = *pa;
    *pa = *pb;
    *pb = tmp;
}
int main()
{
    int a = 30;
    int b = 20;
    //int tmp = 0;
    printf("a=%d b=%d\n",a,b);
//    tmp = a;
//    a = b;
//    b = tmp;
    //Swap1(a,b);   //函数Swap1达不到交换值的要求
    Swap2(&a,&b);   //利用指针的方法解决交换函数   &a,&b是实参
    printf("a=%d b=%d\n",a,b);
    return 0;
}
*/
/*
int main()
{
   int a =0;
   int*pa = &a;//pa指针变量
   *pa = 20;//解引用操作
   printf("%d",a);
    return 0;
}
 */
 //实参和形参


//函数调用
   //————1.传值调用=Swap1  2.传址调用=Swap2
  //练习
  /*
  //1.写一个函数判断一个数是不是素数
int is_prime(int n)
{
   //是素数返回1 不是素数返回0
    int j=0;

    //产生2到n-1的被除数
    for(j=2;j<n;j++)//j=2;j<n排除了1和数字本身
    //优化  for(j=2;j<=sart(n);j++)
    {
     if(n%j==0)
     return 0;
    }
     if(j==n)
     return 1;
}
 int main()
{
  //打印100到200的素数
  int i =0;
  int count = 0;
  for(i=100;i<=200;i++)
  {
      //判断是否是素数
      if(is_prime(i) == 1)
        count++;
        printf("%d\n",i);
  }
      printf("count = %d",count);
    return 0;
}
  */
  /*
   //2.写一个函数判断一年是否是闰年
int is_leap_year(int n)
{
    if((n%4==0&&n%100!=0)||(n%400==0))
        return 1;
    else
        return 0;
}
int main()
{
   int year =0;
   for(year=1000;year<=2022;year++)
   {
     //判断是不是闰年
     if(is_leap_year(year)==1)
        {
           printf("%d\n",year);
        }

   }
    return 0;
}
    */
     /*
   //3.写一个函数，实现一个整形有序数组的二分查找
        //找到返回下标 找不到返回-1
binary_search(int arr[],int k,int sz)
{
    //算法的实现
    int left = 0;

    int right = sz-1;

    while(left<=right)
    {
    int mid = (left+right)/2;//中间元素下标
    if(arr[mid]>k)
    {
        right = mid-1;
    }
    else if(arr[mid]<k)
    {
        left = mid+1;
    }
    else
     {
        return mid;
     }
  }
     if(left>right)
       return -1;
}
int main()
{
    int arr[]={1,2,3,4,5,6,7,8,9,10};
    int k = 7;
    int sz = sizeof(arr)/sizeof(arr[0]);
    int ret = binary_search(arr,k,sz);
    if(ret == -1)
    {
        printf("找不到");
    }
    else
    {
        printf("找到了，下标是：%d\n",ret);
    }

    return 0;
}
   */
   /*
   //4.写一个函数 每调用一次这个函数 就会将num的值加1
void Add(int*p)
{
    (*p)++;   //===*p必须用括号括起来
}
int main()
{
    int num = 0;
    Add(&num);
    printf("%d\n",num);//1
    Add(&num);
    printf("%d\n",num);//2
    Add(&num);
    printf("%d\n",num);//3


    return 0;
}
  */

  //函数的嵌套调用和链式访问
  //1.嵌套调用
       //.....
  //2.链式访问:把一个函数的返回值作为另一个函数的参数
  /*
 int main()
 {
     int len = 0;
     //1.
     len = strlen("afdfdsfds");
     printf("%d\n",len);
     //2
     printf("%d",strlen("afdfdsfds"));
     //1  2同样的效果  2就是链式访问
     return 0;
 }
   */
   /*
int main()
{
   printf("%d",printf("%d",printf("%d",43)));//4321   printf的返回值可以查

    return 0;
}
  */
/*
//函数的声明与定义

//函数声明

#include "add.h"
int main()
{
   int a = 20;
   int b = 60;
   //scanf("%d%d",&a,&b);
   //函数调用
   int sum = Add(a,b);
   printf("%d\n",sum);
    return 0;
}
*/

