#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
                 //数据的存储（1）
                 //1.数据类型的详细介绍
                 //2.整型在内存中的存储：原码、反码、补码
                 //3.大小端字节序介绍以及判断
                 //4.浮点型在内存中的存储解析
//数据类型的详细介绍
//int main()
//{
//    int a = 10;
//    float f = 10.0
//    short s = 1;
//    return 0;
//}
//构造类型：
//>数组类型
//>结构体类型 struct
//>枚举类型 enum
//>联合类型 union
//指针类型
//int* char*.....accumulate
//空类型---void

/*
//整型在内存中的存储
//原码、反码、补码
int main()
{
    int a = 10;//4个字节
    //00000000000000000000000000010100---原码
    //00000000000000000000000000010100---反码
    //00000000000000000000000000010100---补码
    //正数的原码反码补码相同
    //0x00000014---16进制的表示
    int b = -10;
    //10000000000000000000000000001010---原码
    //11111111111111111111111111110101---反码（符号位不变 其他位按位取反）
    //11111111111111111111111111110110---补码（反码+1）
    //0xFFFFFFF6---补码的16进制的表示
    //所以整数在内存中存的是二进制的补码
    return 0;
}
int main()
{
    1-1;
    //1+(-1)
    //00000000000000000000000000000001---1的补码    ---《1》
1    //11111111111111111111111111111110---（-1）的反码
    //11111111111111111111111111111111---（-1）的补码     ---《2》
    //00000000000000000000000000000000   ---《1》和---《2》相加的结果为0---计算正确

    //00000000000000000000000000000001---1的原码
    //10000000000000000000000000000001---（-1）的原码
    //10000000000000000000000000000010---原码相加结果为-2 结果错误

    return 0;
}
*/

//大小端的介绍
//大端存储模式：数据的低位保存在内存的高地址，高位保存在低地址中
//小端存储模式：数据的低位保存在内存的低地址，高位保存在高地址中
//0x11 22 33 44
//11 22 33 44 ---大端存储
//44 33 22 11 ---小端存储
//大端按顺序 小端反着来
//int main()
//{
//    int a = 20;
//    printf("%p\n",&a);
//    return 0;
//}













