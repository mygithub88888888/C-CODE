#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>
#include<windows.h>
#include<math.h>
#include<time.h>
#include<assert.h>

                    //C语言预处理(2)
/*
//带有副作用的宏参数
//#define MAX(X,Y)  ((X)>(Y)?(X):(Y))
//int main()
//{
//    int a = 10;
//    int b = 11;
//    int max = MAX(a,b);
//    printf("%d\n",max);
//
//    return 0;
//}
#define MAX(X,Y)  ((X)>(Y)?(X):(Y))
int main()
{
    int a = 10;
    int b = 11;
    int max = MAX(a++,b++);//带有副作用的宏参数
    printf("%d\n",max);//12
    printf("%d\n",a);//11
    printf("%d\n",b);//13

    return 0;
}
*/
//宏和函数的对比
/*
宏：
1.代码长度：由于使用时宏代码都被直接插入到程序中，因此除了较短的宏，程序的长度将大幅度增长

2.执行速度：更快

3.操作符优先级：宏的求值是在上下文环境中的，因此临近的操作符优先级可能会产生不可预料的结果（所以在使用宏时要尽可能适当的多加括号）

4.参数求值：参数每次用于宏定义时，它们都将重新求值。

5.参数类型：宏的求值与类型无关

6.一般用大写


6.宏不能递归，不能进行调试，可以传递类型

函数：
1.代码长度：函数代码只出现在一个地方，每次使用这个函数的时候，都调用那个地方的同一份代码

2.执行速度：存在调用函数的额外开销

3.操作符优先级：函数参数只在函数调用时求值一次，它的结果值传递给函数。表达式的求值结果更容易预测

4.参数求值：参数在函数被调用时求值一次

5.参数类型：函数的参数是与类型有关的，因此如果参数的类型不同，就需要使用不同的函数

6.函数可以递归，可以进行调试，不可以传递类型

*/
/*
//函数-1
int Max(int x,int y)
{
    return(x > y ? x : y);
}
//宏-2
#define MAX(X,Y)  ((X)>(Y)?(X):(Y))

int main()
{
    int a = 10;
    int b = 11;
    int max = Max(a,b);//函数
    printf("max = %d\n",max);
    max = MAX(a,b);//宏
    printf("max = %d\n",max);
    return 0;
}
//参数类型
#define MALLOC(num,type) (type*)malloc(num*sizeof(type)
int main()
{
    int*p = (int*)malloc(10*sizeof(int));

    //使用宏简化代码
    int*p = MALLOC(10,int);
    int*p = (int*)malloc(10*sizeof(int));

    return 0;
}
*/
/*
//#undef的用法
#define MAX 100
int main()
{
    printf("MAX = %d\n",MAX);

#undef MAX
    printf("MAX = %d\n",MAX);

    return 0;
}
*/
//命令行定义-Linux演示明显
/*
多C编译器提供了一种能力，允许你在命令行中定义符号，用于启动编译过程。
当我们根据同一个源文件编译一个程序的不同版本时，这个特性特别有用。

例如：定义不同长度的数组。

int buf[MAX_NUM];
1
在编译程序时，MAX_NUM的值可以在命令行中指定。

在UNIX编译器中，-D选项可以完成这项任务。我们可以用两种方式使用这个选项。

①： -Dname
②： -Dname=stuff

第一种形式，定义了符号name(我们这里是MAX_NUM)，它的值为1。
第二章形式，把该符号的值定义为等号后面的stuff。

*/
//条件编译
#define DEBUG
int main()
{
    int arr[10] = {1,2,3,4,5,6,7,8,9,10};
    int i = 0;

    for(i = 0;i < 10;i++)
    {
        arr[i]=0;
#ifdef DEBUG
       printf("%d ",arr[i]);
#endif // DEBUG
    }

    return 0;
}
//常见的条件编译

//在一般情况下，条件编译指令组合主要有如下几种形式。
//
//1) 第一种形式如下：
//
//#ifdef 宏名称
//
//    /*程序段1*/
//
//#else
//
//    /*程序段2*/
//
//#endif
//
//它表示如果宏名称已经定义，则对程序段 1 进行编译；否则对程序段 2 进行编译。如果没有程序段 2，则可以省略“#else”，如下所示：
//
//#ifdef 宏名称
//
//    /*程序段1*/
//
//#endif
//
//2) 第二种形式如下：
//
//#ifndef 宏名称
//
//    /*程序段1*/
//
//#else
//
//    /*程序段2*/
//
//#endif
//
//#ifndef 指令的含义正好与 #ifdef 指令相反，因此它表示如果宏名称未被定义，则对程序段 1 进行编译，否则对程序段 2 进行编译。
//
//3) 第三种形式如下：
//
//#if 表达式
//
//    /*程序段1*/
//
//#else
//
//    /*程序段2*/
//
//#endif
//
//它表示如果表达式的值为真（非 0），则对程序段 1 进行编译，否则对程序段 2 进行编译。如果有多个（两个以上）条件，则可以用 #elif 指令，如下所示：
//
//#if 表达式
//
//    /*程序段1*/
//
//#elif 表达式
//
//    /*程序段2*/
//
//#elif 表达式
//
//    /*程序段3*/
//
//#else
//
//    /*程序段4*/
//
//#endif
//
//妙用“defined”
//
//在 C 语言中，除了“#ifdef”和“#ifndef”指令之外，还可以使用 defined 判断标识符是否定义过。实际上，“#if defined”等价于“#ifdef”，而“#if！defined”等价于“#ifndef”。例如，下面的示例代码就演示了如何使用 defined 来避免重复包含头文件引起的重复定义问题：
//
//#if !defined(_CASHREGISTER_XML_PARSER_H_)
//
//#define _CASHREGISTER_XML_PARSER_H_
//
//#endif
//
//它实际上等价于下面的代码：
//
//#ifndef _CASHREGISTER_XML_PARSER_H_
//
//#define _CASHREGISTER_XML_PARSER_H_
//
//#endif
//
//当然，从上面的示例来看，或许看不出来使用 defined 有任何的优势。但是，在处理双重和多重判断时，defined 的优势就显现出来了，如下面的代码所示：
//
//#ifndef _CASHREGISTER_XML_PARSER_H_
//
//#ifndef _CASHREGISTER_XML_TRANSFORM_H_
//
//#ifndef _CASHREGISTER_XML_DECODE_H_
//
//#endif
//
//#endif
//
//#endif
//
//从上面的代码中可以看出，使用“#ifdef”和“#ifndef”指令一次只能同时检测一个宏是否定义。如果需要检测多个宏，则需将“#ifdef”和“#ifndef”指令重复复制多次，这样看起来很不友好。但是，如果这里使用 defined，那就简单多了，如下面的代码所示：
//
//#if !defined(_CASHREGISTER_XML_PARSER_H_)&&!defined(_CASHREGISTER_XML_TRANSFORM_H_)&&!defined(_CASHREGISTER_XML_DECODE_H_)
//
//#endif
//
//其实，defined 的使用是非常普及的，在一些常见的 C 语言标准库中也随处可见，例如：
//
//#if (!defined __STRICT_ANSI__ && !defined _ISOC99_SOURCE && \
//
//    !defined _POSIX_SOURCE && !defined _POSIX_C_SOURCE && \
//
//    !defined _XOPEN_SOURCE && !defined _BSD_SOURCE && \
//
//    !defined _SVID_SOURCE)
//
//# define _BSD_SOURCE    1
//
//# define _SVID_SOURCE    1
//
//#endif
//
//因此，这里建议使用 defined。因为即使当前代码使用的是简单的条件编译，以后在维护或升级时也可能会增加，这样也可以提高程序的可维护性。



















