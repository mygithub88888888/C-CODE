#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<math.h>
#include<time.h>
        //操作符第二节
//int main()
//{
//    int a = 10;
//    char b = 't';
//    int arr[10] = {0};
//    printf("%d\n",sizeof(a));
//    printf("%d\n",sizeof(int));
//    printf("%d\n",sizeof(b));
//    printf("%d\n",sizeof(char));
//    printf("%d\n",sizeof(arr));//40
//    printf("%d\n",sizeof(int[10]));//40

//    short s = 0;
//    int a = 10;
//    printf("%d\n",sizeof(s = a+5));//sizeof括号内的表达式不参加运算
//    printf("%d\n",s);
//    return 0;
//}
//int main()
//{
//    int a = 11;
//    a = a | (1 << 2);
//    printf("%d\n",a);//15
//    a = a & (~(1 << 2));
//    printf("%d\n",a);//11
    //00000000000000000000000000001011
    //00000000000000000000000000000100
    //1<<2
    //00000000000000000000000000000001
    //00000000000000000000000000001111
    //11111111111111111111111111111011
    //00000000000000000000000000000100
    //0000000000000000000000000000001011


//   int a = 0;
   //"~"按（2进制）位取反
   //00000000000000000000000000000000
   //11111111111111111111111111111111  - 补码
   //11111111111111111111111111111110  - 反码
   //10000000000000000000000000000001  - 原码
//   printf("%d\n",~a);
//     return 0;
//}

//int main()
//{
//   int a = 10;
//   //printf("%d\n",++a);//前置++ 先++后使用
//   printf("%d\n",a++);//后置++ 先使用在++
//    return 0;
//}

//int main()
//{
//   int a = (int)3.14;
//   printf("%d\n",a);//3
//    return 0;
//}
/*
  //sizeof和数组 练习
void test1(int arr[])
{
    printf("%d\n",sizeof(arr));
}
void test2(char ch[])
{
    printf("%d\n",sizeof(ch));
}
int main()
{
    int arr[10]= {0};
    char ch[10]= {0};
    printf("%d\n",sizeof(arr));//40
    printf("%d\n",sizeof(ch));//10
    test1(arr);//4
    test2(ch);//4
    //数组传参默认传首元素的地址 一个指针占4个字节
    return 0;
}
*/
//关系操作符
//> < >= <= ==
/*
//逻辑操作符
//&& -逻辑与
//|| -逻辑或
int main()
{
    int a = 3;
    int b = 5;
    int c = a && b;
    printf("%d\n",c); // 1
    int d = a || b;
    printf("%d\n",d); // 1
    return 0;
}
*/
//练习
/*
int main()
{
    int i =0,a=0,b=2,c=3,d=4;
    //i = a++ && ++b && d++;  //逻辑与左边如果结果是假，右边不再计算
    i =  a++ || ++b || d++;   //逻辑或左边如果结果是真，右边不再计算
    printf("a=%d\n b=%d\n c=%d\n d=%d\n",a,b,c,d);//逻辑与结果 ：1 2 3 4
                                                  //逻辑或结果 ：1 3 3 4
    return 0;
}
*/
/*
//条件操作符
//exp1 ? exp2 :exp3
//int main()
//{
//    int a = 0;
//    int b = 0;
//    if(a>5)
//        b=3;
//    else
//        b=-3;
//    b = (a>5?3:-3);
//    return 0;
//}
int main()
{
    int a = 10;
    int b = 20;
    int max = 0;
    if(a>b)
        max = a;
    else
        max = b;
    max = (a>b?a:b);
    printf("%d\n",max);
    return 0;
}
*/
//逗号表达式---逗号隔开的多个表达式 依次执行 结果是最后一个表达式的结果
//exp1 , exp2 ,exp3 ,exp4

//下标引用、函数调用和结构成员
//1.[]下标引用操作符
//int main()
//{
//    int a[10]={0};
//    a[4] = 10;
//    1+2;
//    return 0;
//}
//2.函数调用
//int get_max(int x,int y)
//{
//    return x>y?x:y;
//}
//int main()
//{
//  int a = 10;
//  int b = 20;
//  int max = get_max(a,b);
//  printf("max = %d\n",max);
//  return 0;
//}

//3.结构体
//学生
//创建一个结构体类型---struct Stu
//struct Stu
//{
//    //成员变量
//    char name[20];
//    int age;
//    char id[20];
//};
//int main()
//{
//    int a = 10;
//    //使用struct Stu这个类型创建了一个学生对象s1并初始化
//    struct Stu s1 = {"藏三",20,"205461558"};
//    struct Stu*ps = &s1;
//
//    printf("%s\n",ps->name);
//    printf("%d\n",ps->age);
//    printf("%s\n",ps->id);
//    //结构体指针->成员名
//
//    /*printf("%s\n",(*ps).name);
//    printf("%d\n",(*ps).age);
//    printf("%s\n",(*ps).id);*/
//
//    /*printf("%s\n",s1.name);
//    printf("%d\n",s1.age);
//    printf("%s\n",s1.id);*/
//    //结构体变量.成员名
//    return 0;
//}

//表达式求值
/*
//隐式类型转换
    //----1.整型提升
int main()
{
    char a = 3;
    //00000000000000000000000000000011
    //发生截断 00000011  - a
    char b = 127;
    //00000000000000000000000001111111(用计算器计算)
    //发生截断 01111111  - b

    // a和b如何相加
    // 00000011  - a
    //整型提升是按照变量的数据类型的符号位来提升的
    //a的整型提升 00000000000000000000000000000011
    // 01111111  - b
    //b的整型提升 00000000000000000000000001111111
    //00000000000000000000000000000011  - a
    //00000000000000000000000001111111  - b
    //00000000000000000000000010000010  -相加的结果
    //c是char类型 进行截断 10000010  - c
    char c = a+b;
    //10000010  - c
    //打印的c是整型，所以进行补位---c的整型提升 11111111111111111111111110000010 - 补码
    //原码取反加1 = 补码
    //补码减1取反 = 原码
    // 11111111111111111111111110000010 - 补码
    // 11111111111111111111111110000001 - 反码
    // 10000000000000000000000001111110 - c的原码（符号位不变，其他位按位取反）--- -126
    printf("%d\n",c);//-126
    return 0;
       //整型提升的规则：
    //负数的整型提升 高位补1
    //正数的整型提升 高位补0
    //无符号数的整型提升 高位直接补0
}
*/
//整型提升实例
/*
int main()
{
    char a = 0xb6;
    short b = 0xb600;
    int c = 0xb6000000;
    if(a == 0xb6)
        printf("a");
    if(b == 0xb600)
        printf("b");
    if(c == 0xb6000000)
        printf("c");
    return 0;
}
*/
//int main()
//{
//    char c = 1;
//%d 有符号10进制整数
//%i 有符号10进制整数
//%o 无符号8进制整数
//%u 无符号10进制整数
//%x 无符号的16进制数字，并以小写abcdef表示
//%X 无符号的16进制数字，并以大写ABCDEF表示
//%F/f 浮点数
//%E/e 用科学表示格式的浮点数
//%g 使用%f和%e表示中的总的位数表示最短的来表示浮点数 G 同g格式，但表示为指数
//%c 单个字符
//%s 字符串
//    printf("%u\n",sizeof(c));//1
//    printf("%u\n",sizeof(+c));//4
//    printf("%u\n",sizeof(!c));//4
//    return 0;
//}
//隐式类型转换
    //----2.算术转换---低类型和高类型计算都转换成高类型在进行计算
//操作符的属性
  //1.操作符的优先级
  //2.操作符的结合性
  //3.是否控制求值顺序、
//int main()
//{
//    int a = 10;
//    int b = 20;
//    int c = b+a*3;
//    return 0;
//}
/*
//---非法表达式
int main()
{
    int i = 0;
    i = i-- - --i * (i = -3) * i++ + ++i;
    printf("i=%d\n",i);
    return 0;
}

int fun()
{
    static int count = 1;
    return ++count;
}
int main()
{
    int answer;
    answer = fun()-fun()*fun();
    printf("%d\n",answer);
    return 0;
}

int main()
{
  int i = 1;
  int a = (++i)+(++i)+(++i);
  printf("a=%d\n",a);

//linux 虚拟机写这个C代码结果是10
  return 0;
 }
*/














